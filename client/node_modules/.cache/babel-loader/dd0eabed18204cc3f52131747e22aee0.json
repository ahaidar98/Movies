{"ast":null,"code":"var _jsxFileName = \"/Users/ahaidar/Desktop/lattice/react-boilerplate/client/src/container/HomePage/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport './styles.css';\nimport { getMovieData, getSearchedMovieData } from './actions';\nimport MovieGrid from '../../components/MovieGrid/index';\nimport Pagination from '../../components/Pagination/index';\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageTitle: 'Popular Movies',\n      pgNum: 1,\n      isSearchQuery: false\n    };\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.onPgNumValueChange = this.onPgNumValueChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getMovieData(this.state.pgNum);\n  }\n\n  async onSearchInputChange(e) {\n    e.preventDefault(); // replace all spaces with %20 for the api url query\n\n    const apiSearchQuery = e.target.value.replace(/ /gi, '%20');\n    const pageTitleStr = e.target.value !== '' ? e.target.value : 'Popular Movies';\n    const isSearchQueryAPI = e.target.value !== '' ? true : false;\n    await this.setState({\n      pageTitle: pageTitleStr,\n      isSearchQueryAPI,\n      pgNum: 1\n    });\n\n    if (isSearchQueryAPI) {\n      this.props.getSearchedMovieData(apiSearchQuery, this.state.pgNum);\n    } else {\n      this.props.getMovieData(1);\n    }\n  }\n\n  async onPgNumValueChange(pgOperation) {\n    const apiSearchQuery = this.state.isSearchQueryAPI ? this.state.pageTitle.replace(/ /gi, '%20') : undefined;\n    const operation = pgOperation === '+' ? parseInt(this.state.pgNum + 1) : parseInt(this.state.pgNum - 1);\n    await this.setState({\n      pgNum: operation\n    });\n\n    if (this.state.isSearchQueryAPI) {\n      this.props.getSearchedMovieData(apiSearchQuery, this.state.pgNum);\n    } else {\n      this.props.getMovieData(this.state.pgNum);\n    }\n  }\n\n  render() {\n    console.log('data: ', this.props.movieData);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.props.movieStatus === 'DONE' ? React.createElement(\"div\", {\n      className: \"containerWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"searchbarRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"movieSearchbar movieInput\",\n      onChange: this.onSearchInputChange,\n      placeholder: \"Enter a title of a movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(MovieGrid, {\n      movies: this.props.movieData,\n      pgTitle: this.state.pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Pagination, {\n      onPgNumValueChange: this.onPgNumValueChange,\n      pgValue: this.state.pgNum,\n      pgMaxValue: this.props.movieData.total_pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"LOADING...\"));\n  }\n\n}\n\nHomePage.propTypes = {\n  getMovieData: PropTypes.func.isRequired\n};\nHomePage.defaultProps = {};\n\nfunction mapStateToProps(state) {\n  return {\n    movieData: state.HomePage.movieData,\n    movieStatus: state.HomePage.movieStatus\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getMovieData,\n    getSearchedMovieData\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","map":{"version":3,"sources":["/Users/ahaidar/Desktop/lattice/react-boilerplate/client/src/container/HomePage/index.js"],"names":["React","connect","bindActionCreators","PropTypes","getMovieData","getSearchedMovieData","MovieGrid","Pagination","HomePage","Component","constructor","props","state","pageTitle","pgNum","isSearchQuery","onSearchInputChange","bind","onPgNumValueChange","componentDidMount","e","preventDefault","apiSearchQuery","target","value","replace","pageTitleStr","isSearchQueryAPI","setState","pgOperation","undefined","operation","parseInt","render","console","log","movieData","movieStatus","total_pages","propTypes","func","isRequired","defaultProps","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\nimport { getMovieData, getSearchedMovieData } from './actions';\nimport MovieGrid from '../../components/MovieGrid/index';\nimport Pagination from '../../components/Pagination/index';\n\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageTitle: 'Popular Movies',\n      pgNum: 1,\n      isSearchQuery: false,\n    };\n\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.onPgNumValueChange = this.onPgNumValueChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getMovieData(this.state.pgNum);\n  }\n\n  async onSearchInputChange(e) {\n    e.preventDefault();\n\n    // replace all spaces with %20 for the api url query\n    const apiSearchQuery = e.target.value.replace(/ /gi, '%20');\n    const pageTitleStr = e.target.value !== '' ? e.target.value : 'Popular Movies';\n    const isSearchQueryAPI = e.target.value !== '' ? true : false;\n\n    await this.setState({ pageTitle: pageTitleStr, isSearchQueryAPI, pgNum: 1 });\n\n    if(isSearchQueryAPI) {\n      this.props.getSearchedMovieData(apiSearchQuery, this.state.pgNum);\n    } else {\n      this.props.getMovieData(1);\n    }\n  }\n\n\n  async onPgNumValueChange(pgOperation) {\n    const apiSearchQuery = this.state.isSearchQueryAPI ? this.state.pageTitle.replace(/ /gi, '%20') : undefined;\n    const operation = pgOperation === '+' ? parseInt(this.state.pgNum + 1) : parseInt(this.state.pgNum - 1);\n\n    await this.setState({ pgNum: operation });\n\n    if(this.state.isSearchQueryAPI) {\n      this.props.getSearchedMovieData(apiSearchQuery, this.state.pgNum);\n    } else {\n      this.props.getMovieData(this.state.pgNum);\n    }\n  }\n\n  render() {\n    console.log('data: ', this.props.movieData)\n\n    return(\n      <div>\n        {this.props.movieStatus === 'DONE' ?\n          <div className=\"containerWrapper\">\n            <div className=\"searchbarRow\">\n              <input className=\"movieSearchbar movieInput\" onChange={this.onSearchInputChange} placeholder=\"Enter a title of a movie\" />\n            </div>\n            <MovieGrid movies={this.props.movieData} pgTitle={this.state.pageTitle} />\n            <Pagination\n              onPgNumValueChange={this.onPgNumValueChange}\n              pgValue={this.state.pgNum}\n              pgMaxValue={this.props.movieData.total_pages}\n            />\n          </div>\n        :\n          <div>LOADING...</div>\n        }\n      </div>\n    );\n  }\n}\n\nHomePage.propTypes = {\n  getMovieData: PropTypes.func.isRequired,\n};\n\nHomePage.defaultProps = {\n\n};\n\nfunction mapStateToProps(state) {\n  return {\n    movieData: state.HomePage.movieData,\n    movieStatus: state.HomePage.movieStatus,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ getMovieData, getSearchedMovieData }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n"]},"metadata":{},"sourceType":"module"}